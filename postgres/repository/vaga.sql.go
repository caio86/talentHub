// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: vaga.sql

package repository

import (
	"context"
	"time"
)

const createVaga = `-- name: CreateVaga :one
INSERT INTO vagas (
  name       ,
  description,
  open       ,
  created_at ,
  expires_at
) VALUES ( $1, $2, $3, $4, $5 )
  RETURNING id, name, description, open, created_at, expires_at
`

type CreateVagaParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Open        bool      `json:"open"`
	CreatedAt   time.Time `json:"created_at"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) CreateVaga(ctx context.Context, arg CreateVagaParams) (Vaga, error) {
	row := q.db.QueryRow(ctx, createVaga,
		arg.Name,
		arg.Description,
		arg.Open,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Vaga
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Open,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteVaga = `-- name: DeleteVaga :exec
DELETE FROM vagas
  WHERE id = $1
`

func (q *Queries) DeleteVaga(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVaga, id)
	return err
}

const getVaga = `-- name: GetVaga :one
SELECT id, name, description, open, created_at, expires_at
  FROM vagas
  WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVaga(ctx context.Context, id int64) (Vaga, error) {
	row := q.db.QueryRow(ctx, getVaga, id)
	var i Vaga
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Open,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listVagas = `-- name: ListVagas :many
SELECT id, name, description, open, created_at, expires_at FROM vagas
  LIMIT $1
  OFFSET $2
`

type ListVagasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVagas(ctx context.Context, arg ListVagasParams) ([]Vaga, error) {
	rows, err := q.db.Query(ctx, listVagas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vaga
	for rows.Next() {
		var i Vaga
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Open,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVaga = `-- name: UpdateVaga :one
UPDATE vagas
  SET name        = $2,
      description = $3,
      open        = $4,
      expires_at  = $5
  WHERE id = $1
  RETURNING id, name, description, open, created_at, expires_at
`

type UpdateVagaParams struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Open        bool      `json:"open"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) UpdateVaga(ctx context.Context, arg UpdateVagaParams) (Vaga, error) {
	row := q.db.QueryRow(ctx, updateVaga,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Open,
		arg.ExpiresAt,
	)
	var i Vaga
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Open,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
