// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: candidates.sql

package repository

import (
	"context"
)

const addCandidateEducation = `-- name: AddCandidateEducation :one
INSERT INTO education (candidate_id, institution, course, level)
VALUES ($1, $2, $3, $4)
ON CONFLICT DO NOTHING
RETURNING id, candidate_id, institution, course, level
`

type AddCandidateEducationParams struct {
	CandidateID int32  `json:"candidate_id"`
	Institution string `json:"institution"`
	Course      string `json:"course"`
	Level       string `json:"level"`
}

func (q *Queries) AddCandidateEducation(ctx context.Context, arg AddCandidateEducationParams) (Education, error) {
	row := q.db.QueryRow(ctx, addCandidateEducation,
		arg.CandidateID,
		arg.Institution,
		arg.Course,
		arg.Level,
	)
	var i Education
	err := row.Scan(
		&i.ID,
		&i.CandidateID,
		&i.Institution,
		&i.Course,
		&i.Level,
	)
	return i, err
}

const addCandidateExperience = `-- name: AddCandidateExperience :one
INSERT INTO experiences (candidate_id, company, role, years)
VALUES ($1, $2, $3, $4)
ON CONFLICT DO NOTHING
RETURNING id, candidate_id, company, role, years
`

type AddCandidateExperienceParams struct {
	CandidateID int32  `json:"candidate_id"`
	Company     string `json:"company"`
	Role        string `json:"role"`
	Years       int32  `json:"years"`
}

func (q *Queries) AddCandidateExperience(ctx context.Context, arg AddCandidateExperienceParams) (Experience, error) {
	row := q.db.QueryRow(ctx, addCandidateExperience,
		arg.CandidateID,
		arg.Company,
		arg.Role,
		arg.Years,
	)
	var i Experience
	err := row.Scan(
		&i.ID,
		&i.CandidateID,
		&i.Company,
		&i.Role,
		&i.Years,
	)
	return i, err
}

const addCandidateInterest = `-- name: AddCandidateInterest :exec
INSERT INTO candidate_interests (candidate_id, interest)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
RETURNING candidate_id, interest
`

type AddCandidateInterestParams struct {
	CandidateID int32  `json:"candidate_id"`
	Interest    string `json:"interest"`
}

func (q *Queries) AddCandidateInterest(ctx context.Context, arg AddCandidateInterestParams) error {
	_, err := q.db.Exec(ctx, addCandidateInterest, arg.CandidateID, arg.Interest)
	return err
}

const addCandidateSkill = `-- name: AddCandidateSkill :exec
INSERT INTO candidate_skills (candidate_id, skill)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
RETURNING candidate_id, skill
`

type AddCandidateSkillParams struct {
	CandidateID int32  `json:"candidate_id"`
	Skill       string `json:"skill"`
}

func (q *Queries) AddCandidateSkill(ctx context.Context, arg AddCandidateSkillParams) error {
	_, err := q.db.Exec(ctx, addCandidateSkill, arg.CandidateID, arg.Skill)
	return err
}

const countCandidates = `-- name: CountCandidates :one
SELECT count(*) FROM candidates
`

func (q *Queries) CountCandidates(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCandidates)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCandidate = `-- name: CreateCandidate :one
INSERT INTO candidates (
  name, email, password, phone, address, linkedin, resume_url
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, email, password, phone, address, linkedin, resume_url
`

type CreateCandidateParams struct {
	Name      string  `json:"name"`
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	Phone     *string `json:"phone"`
	Address   *string `json:"address"`
	Linkedin  *string `json:"linkedin"`
	ResumeUrl *string `json:"resume_url"`
}

func (q *Queries) CreateCandidate(ctx context.Context, arg CreateCandidateParams) (Candidate, error) {
	row := q.db.QueryRow(ctx, createCandidate,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.Address,
		arg.Linkedin,
		arg.ResumeUrl,
	)
	var i Candidate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Address,
		&i.Linkedin,
		&i.ResumeUrl,
	)
	return i, err
}

const deleteCandidate = `-- name: DeleteCandidate :exec
DELETE FROM candidates
WHERE id = $1
`

func (q *Queries) DeleteCandidate(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCandidate, id)
	return err
}

const getCandidateByEmail = `-- name: GetCandidateByEmail :one
SELECT id, name, email, password, phone, address, linkedin, resume_url FROM candidates
WHERE email = $1
`

func (q *Queries) GetCandidateByEmail(ctx context.Context, email string) (Candidate, error) {
	row := q.db.QueryRow(ctx, getCandidateByEmail, email)
	var i Candidate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Address,
		&i.Linkedin,
		&i.ResumeUrl,
	)
	return i, err
}

const getCandidateByID = `-- name: GetCandidateByID :one
SELECT id, name, email, password, phone, address, linkedin, resume_url FROM candidates
WHERE id = $1
`

func (q *Queries) GetCandidateByID(ctx context.Context, id int32) (Candidate, error) {
	row := q.db.QueryRow(ctx, getCandidateByID, id)
	var i Candidate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Address,
		&i.Linkedin,
		&i.ResumeUrl,
	)
	return i, err
}

const getCandidateEducations = `-- name: GetCandidateEducations :many

SELECT id, candidate_id, institution, course, level
FROM education
WHERE candidate_id = $1
`

// Education
func (q *Queries) GetCandidateEducations(ctx context.Context, candidateID int32) ([]Education, error) {
	rows, err := q.db.Query(ctx, getCandidateEducations, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Education
	for rows.Next() {
		var i Education
		if err := rows.Scan(
			&i.ID,
			&i.CandidateID,
			&i.Institution,
			&i.Course,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateExperiences = `-- name: GetCandidateExperiences :many

SELECT id, candidate_id, company, role, years
FROM experiences
WHERE candidate_id = $1
`

// Experience
func (q *Queries) GetCandidateExperiences(ctx context.Context, candidateID int32) ([]Experience, error) {
	rows, err := q.db.Query(ctx, getCandidateExperiences, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Experience
	for rows.Next() {
		var i Experience
		if err := rows.Scan(
			&i.ID,
			&i.CandidateID,
			&i.Company,
			&i.Role,
			&i.Years,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateInterests = `-- name: GetCandidateInterests :many
SELECT candidate_id, interest
FROM candidate_interests
WHERE candidate_id = $1
`

func (q *Queries) GetCandidateInterests(ctx context.Context, candidateID int32) ([]CandidateInterest, error) {
	rows, err := q.db.Query(ctx, getCandidateInterests, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidateInterest
	for rows.Next() {
		var i CandidateInterest
		if err := rows.Scan(&i.CandidateID, &i.Interest); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateSkills = `-- name: GetCandidateSkills :many
SELECT candidate_id, skill
FROM candidate_skills
WHERE candidate_id = $1
`

func (q *Queries) GetCandidateSkills(ctx context.Context, candidateID int32) ([]CandidateSkill, error) {
	rows, err := q.db.Query(ctx, getCandidateSkills, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidateSkill
	for rows.Next() {
		var i CandidateSkill
		if err := rows.Scan(&i.CandidateID, &i.Skill); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllCandidates = `-- name: ListAllCandidates :many
SELECT id, name, email, password, phone, address, linkedin, resume_url FROM candidates
ORDER BY name
`

func (q *Queries) ListAllCandidates(ctx context.Context) ([]Candidate, error) {
	rows, err := q.db.Query(ctx, listAllCandidates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Candidate
	for rows.Next() {
		var i Candidate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Phone,
			&i.Address,
			&i.Linkedin,
			&i.ResumeUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCandidates = `-- name: ListCandidates :many
SELECT id, name, email, password, phone, address, linkedin, resume_url FROM candidates
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListCandidatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCandidates(ctx context.Context, arg ListCandidatesParams) ([]Candidate, error) {
	rows, err := q.db.Query(ctx, listCandidates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Candidate
	for rows.Next() {
		var i Candidate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Phone,
			&i.Address,
			&i.Linkedin,
			&i.ResumeUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCandidateEducation = `-- name: RemoveCandidateEducation :exec
DELETE FROM education
WHERE id = $1
`

func (q *Queries) RemoveCandidateEducation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeCandidateEducation, id)
	return err
}

const removeCandidateExperience = `-- name: RemoveCandidateExperience :exec
DELETE FROM experiences
WHERE id = $1
`

func (q *Queries) RemoveCandidateExperience(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeCandidateExperience, id)
	return err
}

const removeCandidateInterest = `-- name: RemoveCandidateInterest :exec
DELETE FROM candidate_interests
WHERE candidate_id = $1 AND interest = $2
`

type RemoveCandidateInterestParams struct {
	CandidateID int32  `json:"candidate_id"`
	Interest    string `json:"interest"`
}

func (q *Queries) RemoveCandidateInterest(ctx context.Context, arg RemoveCandidateInterestParams) error {
	_, err := q.db.Exec(ctx, removeCandidateInterest, arg.CandidateID, arg.Interest)
	return err
}

const removeCandidateSkill = `-- name: RemoveCandidateSkill :exec
DELETE FROM candidate_skills
WHERE candidate_id = $1 AND skill = $2
`

type RemoveCandidateSkillParams struct {
	CandidateID int32  `json:"candidate_id"`
	Skill       string `json:"skill"`
}

func (q *Queries) RemoveCandidateSkill(ctx context.Context, arg RemoveCandidateSkillParams) error {
	_, err := q.db.Exec(ctx, removeCandidateSkill, arg.CandidateID, arg.Skill)
	return err
}

const searchCandidatesByInterest = `-- name: SearchCandidatesByInterest :many

SELECT c.id, c.name, c.email, c.password, c.phone, c.address, c.linkedin, c.resume_url
FROM candidates c
JOIN candidate_interests ci ON c.id = ci.candidate_id
WHERE ci.interest = $1
`

// Interests
func (q *Queries) SearchCandidatesByInterest(ctx context.Context, interest string) ([]Candidate, error) {
	rows, err := q.db.Query(ctx, searchCandidatesByInterest, interest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Candidate
	for rows.Next() {
		var i Candidate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Phone,
			&i.Address,
			&i.Linkedin,
			&i.ResumeUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCandidatesBySkill = `-- name: SearchCandidatesBySkill :many


SELECT c.id, c.name, c.email, c.password, c.phone, c.address, c.linkedin, c.resume_url
FROM candidates c
JOIN candidate_skills cs ON c.id = cs.candidate_id
WHERE cs.skill = $1
`

// Skills
func (q *Queries) SearchCandidatesBySkill(ctx context.Context, skill string) ([]Candidate, error) {
	rows, err := q.db.Query(ctx, searchCandidatesBySkill, skill)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Candidate
	for rows.Next() {
		var i Candidate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Phone,
			&i.Address,
			&i.Linkedin,
			&i.ResumeUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCandidate = `-- name: UpdateCandidate :one
UPDATE candidates
SET
  name = $2,
  phone = $3,
  address = $4,
  linkedin = $5,
  resume_url = $6
WHERE id = $1
RETURNING id, name, email, password, phone, address, linkedin, resume_url
`

type UpdateCandidateParams struct {
	ID        int32   `json:"id"`
	Name      string  `json:"name"`
	Phone     *string `json:"phone"`
	Address   *string `json:"address"`
	Linkedin  *string `json:"linkedin"`
	ResumeUrl *string `json:"resume_url"`
}

func (q *Queries) UpdateCandidate(ctx context.Context, arg UpdateCandidateParams) (Candidate, error) {
	row := q.db.QueryRow(ctx, updateCandidate,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Address,
		arg.Linkedin,
		arg.ResumeUrl,
	)
	var i Candidate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Address,
		&i.Linkedin,
		&i.ResumeUrl,
	)
	return i, err
}
